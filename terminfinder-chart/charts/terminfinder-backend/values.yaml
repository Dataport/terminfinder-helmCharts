# Default values for terminfinder-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  postgresql:
    auth:
      username: terminfinder
      database: terminfinder
      existingSecret: "" # if not set, default: "{{ Release.Name }}-postgres"
      secretKeys:
        userPasswordKey: "password"
    service:
      name: "" # if not set, default: "{{ Release.Name }}-postgres"
      ports:
        postgresql: 5432 # Default port

replicaCount: 1

image:
  repository: registry.opencode.de/dataport/terminfinder/terminfinder-backend
  pullPolicy: IfNotPresent
  tag: "0.1.0"

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }

podSecurityContext:
  runAsUser: 1000
  fsGroup: 2000
  runAsGroup: 3000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: "nginx"
  annotations:
    { }
  # kubernetes.io/ingress.class: nginx
  # nginx.ingress.kubernetes.io/rewrite-target: /
  # nginx.ingress.kubernetes.io/ssl-redirect: "true"
  # cert-manager.io/cluster-issuer: letsencrypt-production
  hosts:
    - host: terminfinder.opencode.de
      paths:
        - path: /api
          pathType: Prefix
  tls: [ ]
  #  - secretName: cert-terminfinder.opencode.de
  #    hosts:
  #      - terminfinder.de

resources:
  # We recommend to not use limits, since workload spikes can hinder the application or cause crashes
  # due to OOM errors. Read more about it here:
  # https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits?hl=en
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 500m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 20
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: { }

tolerations: [ ]

affinity: { }

postgresql:
  enabled: true

  serviceAccount:
    create: true

  ## Set permissions for the data volume
  ## Only needed when volume has not correct permissions
  volumePermissions:
    enabled: true

    image:
      registry: docker.io # Notice, may this is not allowed
      repository: bitnami/bitnami-shell
      # tag: 11-debian-11-r77
      # pullPolicy: Always
      # pullSecrets: []

    initdb:
      # Enabling the UUID-OSSP
      scripts:
        99-enable-uuid.sql: |
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          ALTER EXTENSION "uuid-ossp" SET SCHEMA public;

  # More variables / parameters can be found here:
  # https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
